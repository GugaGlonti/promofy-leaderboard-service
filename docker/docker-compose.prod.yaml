version: '3.9'

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: promofy-leaderboard-service:latest
    container_name: service
    command: ['node', 'dist/main']
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: leaderboard
      AUTOLOAD_ENTITIES: 'true'
      SYNCHRONIZE: 'true'
      DROP_SCHEMA: 'false'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_MAX_RETRIES: 3
      REDIS_ENABLE_OFFLINE_QUEUE: 'true'
      REDIS_AUTO_RECONNECT: 'true'
      REDIS_KEEP_ALIVE: 10000
      KAFKA_BROKERS: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: stream-processing-group
      KAFKA_CLIENT_ID: stream-processing-service
      FAKE_DATA_KAFKA_CLIENT_ID: fake-data-producer
      KAFKAJS_NO_PARTITIONER_WARNING: '1'
      FAKE_DATA_CONCURRENT_WORKERS: 1
      FAKE_DATA_SEND_EVENT_INTERVAL: 1000
      FAKE_DATA_SCORE_VARIANCE: 100
      FAKE_DATA_SCORE_UPDATE_PROBABILITY: 0.7
      FAKE_DATA_SCORE_NEW_PLAYER_PROBABILITY: 0.1
      FAKE_DATA_INITIAL_PLAYER_SCORE: 1000
      PORT: 3000
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      topics:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 1g
    cpus: 1.0

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:29092'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      test:
        ['CMD-SHELL', 'kafka-topics.sh --bootstrap-server kafka:9092 --list']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 2g
    cpus: 1.0

  topics:
    image: bitnami/kafka:3.6
    container_name: topics
    depends_on:
      - kafka
    entrypoint: >
      bash -c "
        kafka-topics.sh --create --if-not-exists --topic score_update --partitions 3 --replication-factor 2 --bootstrap-server kafka:9092 &&
        kafka-topics.sh --create --if-not-exists --topic new_player   --partitions 3 --replication-factor 2 --bootstrap-server kafka:9092 &&
        echo 'Topics created successfully!'
        echo 'Waiting for promofy-leaderboard-service to start...'
        sleep infinity
      "
    restart: 'no'
    healthcheck:
      test: [
          'CMD-SHELL',
          "   kafka-topics.sh --bootstrap-server kafka:9092 --list | grep -q 'score_update'
          &&  kafka-topics.sh --bootstrap-server kafka:9092 --list | grep -q 'new_player'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - app-network
    mem_limit: 512m
    cpus: 0.5

  redis:
    image: bitnami/redis:7.2
    container_name: redis
    ports:
      - '6379:6379'
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 512m
    cpus: 0.5

  postgres:
    image: bitnami/postgresql:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: leaderboard
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d leaderboard']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 1g
    cpus: 1.0

networks:
  app-network:
    driver: bridge
