services:
  ### ------------------------------------------------------- ###
  ### ------------- Promofy Leaderboard Service ------------- ###
  ### ------------------------------------------------------- ###
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: promofy-leaderboard-service:latest
    container_name: app
    command: ['node', 'dist/main']
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: leaderboard
      AUTOLOAD_ENTITIES: 'true'
      SYNCHRONIZE: 'true'
      DROP_SCHEMA: 'false'
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_MAX_RETRIES: 3
      REDIS_ENABLE_OFFLINE_QUEUE: 'true'
      REDIS_AUTO_RECONNECT: 'true'
      REDIS_KEEP_ALIVE: 10000
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      KAFKA_CONSUMER_GROUP_ID: stream-processing-group
      KAFKA_CLIENT_ID: stream-processing-service
      KAFKAJS_NO_PARTITIONER_WARNING: '1'
      PORT: 3000
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      fake-data:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 1g
    cpus: 1.0

  ### ------------------------------------------------------- ###
  ### --------------------- Kafka Cluster ------------------- ###
  ### ------------------------------------------------------- ###
  kafka-1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka-1:9092,CONTROLLER://kafka-1:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-1:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    healthcheck:
      test: ['CMD-SHELL', 'kafka-topics --bootstrap-server kafka-1:9092 --list']
      interval: 5s
      timeout: 2s
      retries: 30
      start_period: 5s
    networks:
      - app-network
    mem_limit: 2g
    cpus: 1.0

  kafka-2:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - '9094:9092'
      - '9095:9093'
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_BROKER_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka-2:9092,CONTROLLER://kafka-2:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-2:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    healthcheck:
      test: ['CMD-SHELL', 'kafka-topics --bootstrap-server kafka-2:9092 --list']
      interval: 5s
      timeout: 2s
      retries: 30
      start_period: 5s
    networks:
      - app-network
    mem_limit: 2g
    cpus: 1.0

  kafka-3:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka-3
    container_name: kafka-3
    ports:
      - '9096:9092'
      - '9097:9093'
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_BROKER_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka-3:9092,CONTROLLER://kafka-3:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-3:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    healthcheck:
      test: ['CMD-SHELL', 'kafka-topics --bootstrap-server kafka-3:9092 --list']
      interval: 5s
      timeout: 2s
      retries: 30
      start_period: 5s
    networks:
      - app-network
    mem_limit: 2g
    cpus: 1.0

  ### ------------------------------------------------------- ###
  ### ---------------------- Kafka UI ----------------------- ###
  ### ------------------------------------------------------- ###
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    networks:
      - app-network
    mem_limit: 512m
    cpus: 0.5

  ### ------------------------------------------------------- ###
  ### ----------------- Fake Data Producer ------------------ ###
  ### ------------------------------------------------------- ###
  fake-data:
    build:
      context: ../fake-data-producer
      dockerfile: Dockerfile
    container_name: fake-data
    environment:
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9092,kafka-3:9092
      CONCURRENT_WORKERS: 2
      SEND_EVENT_INTERVAL: 1000
      FAKE_DATA_KAFKA_CLIENT_ID: fake-data-producer
      FAKE_DATA_CONCURRENT_WORKERS: 1
      FAKE_DATA_SEND_EVENT_INTERVAL: 1000
      FAKE_DATA_SCORE_VARIANCE: 100
      FAKE_DATA_SCORE_UPDATE_PROBABILITY: 0.7
      FAKE_DATA_SCORE_NEW_PLAYER_PROBABILITY: 0.1
      FAKE_DATA_INITIAL_PLAYER_SCORE: 1000
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 512m
    cpus: 0.5

  ### ------------------------------------------------------- ###
  ### --------------------- Redis Cluster ------------------- ###
  ### ------------------------------------------------------- ###
  redis-1:
    image: docker.io/bitnami/redis-cluster:7.4
    container_name: redis-1
    volumes:
      - redis_cluster_data_1:/bitnami/redis/data
    environment:
      REDIS_PASSWORD: bitnami
      REDIS_NODES: redis-1 redis-2 redis-3

  redis-2:
    image: docker.io/bitnami/redis-cluster:7.4
    container_name: redis-2
    volumes:
      - redis_cluster_data_2:/bitnami/redis/data
    environment:
      REDIS_PASSWORD: bitnami
      REDIS_NODES: redis-1 redis-2 redis-3

  redis-3:
    image: docker.io/bitnami/redis-cluster:7.4
    container_name: redis-3
    volumes:
      - redis_cluster_data_3:/bitnami/redis/data
    depends_on:
      - redis-1
      - redis-2
    environment:
      REDIS_PASSWORD: bitnami
      REDISCLI_AUTH: bitnami
      REDIS_CLUSTER_REPLICAS: 0
      REDIS_NODES: redis-1 redis-2 redis-3
      REDIS_CLUSTER_CREATOR: yes

  ### ------------------------------------------------------- ###
  ### --------------------- PostgreSQL DB ------------------- ###
  ### ------------------------------------------------------- ###

  postgres:
    image: bitnami/postgresql:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: leaderboard
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d leaderboard']
      interval: 5s
      timeout: 2s
      retries: 30
      start_period: 5s
    restart: unless-stopped
    networks:
      - app-network
    mem_limit: 1g
    cpus: 1.0

networks:
  app-network:
    driver: bridge
