services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@localhost:9093'
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,DOCKER://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    healthcheck:
      test:
        ['CMD-SHELL', 'kafka-topics.sh --bootstrap-server kafka:9092 --list']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  topics:
    image: bitnami/kafka:latest
    container_name: topics
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: >
      bash -c "
        kafka-topics.sh --create --if-not-exists --topic score_update --partitions 3 --replication-factor 1 --bootstrap-server kafka:29092 &&
        kafka-topics.sh --create --if-not-exists --topic new_player   --partitions 3 --replication-factor 1 --bootstrap-server kafka:29092 &&
        echo 'Topics created successfully!'
        echo 'You may now start the promofy-leaderboard-service development instance.'
        sleep infinity
      "
    networks:
      - app-network

  redis:
    image: bitnami/redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: bitnami/postgresql:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: leaderboard
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d leaderboard']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
